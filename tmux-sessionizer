#!/usr/bin/env bash
# tmux-sessionizer: Intelligent tmux session manager
# Usage: tmux-sessionizer [directory]

set -euo pipefail

# Constants
SEARCH_DEPTH=3
DEFAULT_FIND_COMMAND="find"
DEFAULT_SESSION_NAME="main"
CONFIG_FILE="$HOME/.tmux-sessionizer-config"

# Color definitions
CYAN="\033[1;36m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
RESET="\033[0m"

# Utility functions
log() {
    local level="$1"
    local message="$2"
    local color=""

    case "$level" in
    INFO) color="$GREEN" ;;
    WARN) color="$YELLOW" ;;
    ERROR) color="$RED" ;;
    DEBUG) color="$CYAN" ;;
    esac

    echo -e "${color}[$level]${RESET} $message" >&2
}

# Load configuration if exists
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        log "DEBUG" "Loading configuration from $CONFIG_FILE"
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    fi
}

# Get search directories with fallbacks
get_search_directories() {
    # If SEARCH_DIRS is defined in config, use it
    if [[ -n "${SEARCH_DIRS:-}" ]]; then
        echo "${SEARCH_DIRS[@]}"
        return
    fi

    # Default search directories
    local search_dirs=(
        "$HOME/dev"
        "$HOME/personal"
        "$HOME/projects"
        "$HOME/work"
    )

    # Add XDG_CONFIG_HOME if it exists
    if [[ -n "${XDG_CONFIG_HOME:-}" && -d "$XDG_CONFIG_HOME" ]]; then
        search_dirs+=("$XDG_CONFIG_HOME")
    elif [[ -d "$HOME/.config" ]]; then
        search_dirs+=("$HOME/.config")
    fi

    # Return all valid directories
    for dir in "${search_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            echo "$dir"
        fi
    done
}

# Check if tmux is available
check_tmux() {
    if ! command -v tmux >/dev/null 2>&1; then
        log "ERROR" "tmux is not installed or not in PATH"
        exit 1
    fi
}

# Create session or attach to existing
switch_to_session() {
    local session="$1"

    if ! tmux has-session -t "$session" 2>/dev/null; then
        log "INFO" "Session '$session' doesn't exist"
        return 1
    fi

    if [[ -z "${TMUX:-}" ]]; then
        log "INFO" "Attaching to session: $session"
        tmux attach-session -t "$session"
    else
        log "INFO" "Switching to session: $session"
        tmux switch-client -t "$session"
    fi
}

# Get project type based on files
detect_project_type() {
    local dir="$1"

    if [[ -f "$dir/package.json" ]]; then
        echo "node"
    elif [[ -f "$dir/go.mod" ]]; then
        echo "go"
    elif [[ -f "$dir/Cargo.toml" ]]; then
        echo "rust"
    elif [[ -f "$dir/composer.json" ]]; then
        echo "php"
    elif [[ -f "$dir/requirements.txt" || -f "$dir/setup.py" ]]; then
        echo "python"
    elif [[ -f "$dir/Gemfile" || -f "$dir/config.ru" ]]; then
        echo "ruby"
    elif [[ -f "$dir/pom.xml" || -f "$dir/build.gradle" ]]; then
        echo "java"
    elif [[ -f "$dir/CMakeLists.txt" || -f "$dir/Makefile" ]]; then
        echo "c"
    elif [[ -d "$dir/.git" ]]; then
        echo "git"
    else
        echo "generic"
    fi
}

# Set up session with custom layout
setup_session_layout() {
    local session="$1"
    local dir="$2"
    local project_type="$3"

    log "INFO" "Setting up session layout for $project_type project"

    # Rename first window
    tmux rename-window -t "$session:1" "edit"

    # Create standard windows based on project type
    case "$project_type" in
    node)
        # Node.js project
        tmux new-window -t "$session" -n "shell"
        tmux new-window -t "$session" -n "server"
        tmux new-window -t "$session" -n "test"

        # Set up commands in each window
        tmux send-keys -t "$session:shell" "cd $dir && clear" C-m
        tmux send-keys -t "$session:server" "cd $dir && clear" C-m
        tmux send-keys -t "$session:test" "cd $dir && clear" C-m
        ;;
    go)
        # Go project
        tmux new-window -t "$session" -n "shell"
        tmux new-window -t "$session" -n "run"
        tmux new-window -t "$session" -n "test"

        # Set up commands in each window
        tmux send-keys -t "$session:shell" "cd $dir && clear" C-m
        tmux send-keys -t "$session:run" "cd $dir && clear" C-m
        tmux send-keys -t "$session:test" "cd $dir && clear" C-m
        ;;
    rust)
        # Rust project
        tmux new-window -t "$session" -n "shell"
        tmux new-window -t "$session" -n "build"
        tmux new-window -t "$session" -n "test"

        # Set up commands in each window
        tmux send-keys -t "$session:shell" "cd $dir && clear" C-m
        tmux send-keys -t "$session:build" "cd $dir && clear" C-m
        tmux send-keys -t "$session:test" "cd $dir && clear" C-m
        ;;
    php)
        # PHP project
        tmux new-window -t "$session" -n "shell"
        tmux new-window -t "$session" -n "server"
        tmux new-window -t "$session" -n "test"

        # Set up commands in each window
        tmux send-keys -t "$session:shell" "cd $dir && clear" C-m
        tmux send-keys -t "$session:server" "cd $dir && clear" C-m
        tmux send-keys -t "$session:test" "cd $dir && clear" C-m
        ;;
    python)
        # Python project
        tmux new-window -t "$session" -n "shell"
        tmux new-window -t "$session" -n "run"
        tmux new-window -t "$session" -n "test"

        # Set up commands in each window
        tmux send-keys -t "$session:shell" "cd $dir && clear" C-m
        tmux send-keys -t "$session:run" "cd $dir && clear" C-m
        tmux send-keys -t "$session:test" "cd $dir && clear" C-m
        ;;
    *)
        # Generic project
        tmux new-window -t "$session" -n "shell"
        tmux send-keys -t "$session:shell" "cd $dir && clear" C-m
        ;;
    esac

    # Return to edit window and start editor
    tmux select-window -t "$session:edit"
    tmux send-keys -t "$session:edit" "cd $dir && clear" C-m

    if command -v nvim >/dev/null 2>&1; then
        tmux send-keys -t "$session:edit" "nvim ." C-m
    elif command -v vim >/dev/null 2>&1; then
        tmux send-keys -t "$session:edit" "vim ." C-m
    fi
}

# Hydrate session with custom scripts
hydrate_session() {
    local session="$1"
    local dir="$2"

    log "INFO" "Hydrating session: $session"

    # Check for project-specific config first
    if [[ -f "$dir/.tmux-sessionizer" ]]; then
        log "INFO" "Using project-specific sessionizer script"
        tmux send-keys -t "$session:1" "source $dir/.tmux-sessionizer" C-m
        return 0
    elif [[ -f "$HOME/.tmux-sessionizer" ]]; then
        log "INFO" "Using global sessionizer script"
        tmux send-keys -t "$session:1" "source $HOME/.tmux-sessionizer" C-m
        return 0
    else
        # Set up session layout based on project type
        local project_type
        project_type=$(detect_project_type "$dir")
        setup_session_layout "$session" "$dir" "$project_type"
        return 0
    fi
}

# Main function
main() {
    check_tmux
    load_config

    local selected=""

    # Use directory from argument if provided
    if [[ $# -eq 1 ]]; then
        selected="$1"

        # Expand if ~ is used
        if [[ "$selected" == "~"* ]]; then
            selected="${selected/#\~/$HOME}"
        fi

        # Handle relative paths
        if [[ ! "$selected" = /* ]]; then
            selected="$(pwd)/$selected"
        fi
    else
        # Use fzf to select directory
        if ! command -v fzf >/dev/null 2>&1; then
            log "ERROR" "fzf is required but not installed"
            exit 1
        fi

        # Get search directories
        local search_dirs
        mapfile -t search_dirs < <(get_search_directories)

        # Use fd if available (faster), otherwise fall back to find
        local find_command="$DEFAULT_FIND_COMMAND"
        local find_args=()

        if command -v fd >/dev/null 2>&1; then
            find_command="fd"
            find_args=("--type" "d" "--hidden" "--exclude" "node_modules" "--exclude" ".git" "--max-depth" "$SEARCH_DEPTH" "." "${search_dirs[@]}")
        else
            # Construct find command with multiple starting directories
            find_args=()
            for dir in "${search_dirs[@]}"; do
                find_args+=("$dir")
            done
            find_args+=("-type" "d" "-not" "-path" "*/node_modules/*" "-not" "-path" "*/.git/*" "-maxdepth" "$SEARCH_DEPTH")
        fi

        # Run the command and pipe to fzf
        selected=$(2>/dev/null "$find_command" "${find_args[@]}" | sort -u | fzf --height 40% --reverse --prompt="Select directory: ")
    fi

    # Exit if no directory selected
    if [[ -z "$selected" ]]; then
        log "INFO" "No directory selected, exiting"
        return 0
    fi

    # Clean up the path and make sure it exists
    if ! selected=$(realpath "$selected" 2>/dev/null); then
        log "ERROR" "Invalid directory: $selected"
        return 1
    fi

    if [[ ! -d "$selected" ]]; then
        log "ERROR" "Directory does not exist: $selected"
        return 1
    fi

    # Get session name from directory
    local selected_name
    selected_name=$(basename "$selected" | tr '.' '_' | tr ' ' '_' | tr ':' '_')
    log "INFO" "Selected directory: $selected"
    log "INFO" "Session name: $selected_name"

    # Create session or switch to existing
    if tmux has-session -t "$selected_name" 2>/dev/null; then
        switch_to_session "$selected_name"
        return 0
    fi

    # Create new session
    log "INFO" "Creating new session: $selected_name"

    # If not in tmux, create and attach
    if [[ -z "${TMUX:-}" ]]; then
        tmux new-session -s "$selected_name" -c "$selected" -d
        hydrate_session "$selected_name" "$selected"
        tmux attach-session -t "$selected_name"
    else
        # If in tmux, create and switch
        tmux new-session -s "$selected_name" -c "$selected" -d
        hydrate_session "$selected_name" "$selected"
        tmux switch-client -t "$selected_name"
    fi

    return 0
}

# Run main function with arguments
main "$@"
exit $?
